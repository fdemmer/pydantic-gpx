[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"


[project]
name = "pydantic-gpx"
dynamic = ["version"]
description = "Pydantic model for GPX data"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = ["pydantic", "xml", "gpx"]
authors = [{ name = "Florian Demmer", email = "fdemmer@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
  "pydantic-xml",
  "pytz",
  'eval-type-backport;python_version<="3.8"'
]

[project.urls]
Documentation = "https://github.com/fdemmer/pydantic-gpx#readme"
Issues = "https://github.com/fdemmer/pydantic-gpx/issues"
Source = "https://github.com/fdemmer/pydantic-gpx"


[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "gpxpy"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.types]
dependencies = ["mypy>=1.0.0"]

[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/pydantic_gpx tests}"


[tool.coverage.run]
source_pkgs = ["pydantic_gpx", "tests"]
branch = true
parallel = true
omit = []

[tool.coverage.paths]
pydantic_gpx = ["src/pydantic_gpx", "*/pydantic-gpx/src/pydantic_gpx"]
tests = ["tests", "*/pydantic-gpx/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]


[tool.black]
line-length = 90


[tool.ruff]
src = ["src", "tests", "docs", "conftest.py"]

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "A001",    # shadowing is fine
  "ANN",     # Mypy is better at this
  "ARG001",  # unused arguments are normal when implementing interfaces
  "COM",     # Black takes care of our commas
  "D",       # We prefer our own docstring style.
  "E501",    # leave line-length enforcement to Black
  "FBT",     # we have one function that takes one bool; c'mon!
  "FIX",     # Yes, we want XXX as a marker.
  "INP001",  # sometimes we want Python files outside of packages
  "PLR0913", # yes, many arguments, but most have defaults
  "PLR2004", # numbers are sometimes fine
  "PYI034",  # We're not adding typing_extensions just for Self.
  "RUF001",  # leave my smart characters alone
  "SLF001",  # private members are accessed by friendly functions
  "TCH",     # TYPE_CHECKING blocks break autodocs
  "TD",      # we don't follow other people's todo style
  "TID252",  # relative imports are always awesome
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "ARG005", # we need stub lambdas
  "S101",   # assert
  "SIM300", # Yoda rocks in asserts
  "PT005",  # we always add underscores and explicit name
  "PT011",  # broad is fine
  "TRY002", # stock exceptions are fine in tests
  "EM101",  # no need for exception msg hygiene in tests
]


[tool.ruff.lint.isort]
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["pydantic", "tests"]
